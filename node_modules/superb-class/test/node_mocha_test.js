var assert = require('assert'),
    createClass = require('../lib/superb-class.js').createClass,
    expect = require("chai").expect;


describe('class-inheritance-test.js', function() {
    describe('calling create', function() {
        it('should make a function', function() {
            var MyClass = createClass();

            assert.equal("function", typeof MyClass);
        });

        it('should create objects with types that respect instanceof', function() {
            var BaseClass = function(){};
            var MyClass = createClass(BaseClass);

            var obj = new MyClass();

            assert.equal(true, obj instanceof MyClass);
            assert.equal(true, obj instanceof BaseClass);
        });

        it('should have the constructor called with parameters.', function() {
            var called = false;

            var MyClass = createClass({
                constructor : function(a) {
                    called = a;
                }
            });

            new MyClass("called");

            assert.equal("called", called);
        });

        it('should export _super for easy prototype access.', function() {
            var Base = createClass({
                hello : function() {
                    return "Hello";
                }
            });

            var Extend = createClass(Base, {
                hello : function() {
                    return this._super.hello.apply(this, arguments) + " World";
                }
            });

            var e = new Extend();

            assert.equal("Hello World", e.hello());
        });
    });
});

describe('class-instance-test.js', function() {
    describe('calling create', function() {
        it('should export the properties', function() {
            var MyClass = createClass({
                x : 3
            });

            assert.equal(3, new MyClass().x);
        });

        it('should inherit the properties', function() {
            var Base = createClass({
                x : 0,
                y : 2
            });

            var Extend = createClass(Base, {
                x : 1,
                z : 3
            });

            var e = new Extend();

            assert.equal(1, e.x);
            assert.equal(2, e.y);
            assert.equal(3, e.z);
        });

        it('should not allow overwriting private properties.', function() {
            assert.throws(function() {
                var Base = createClass({
                    _x : null
                });

                var Extend = createClass(Base, {
                    _x : null
                });
            }, 'Private member _x is already defined');
        });

        it('should have the name exported correctly', function() {
            var CustomName = createClass("CustomName", {
                // nothing
            });

            assert.ok(/function CustomName/.test(CustomName.toString()));
        });

        /**
         * This currently fails on V8, but it seems like a V8 issue.
         */
        it('stack trace checks should pass', function() {
            var CustomName = createClass("CustomName", {
                checkMethodName : function() {
                    var stack = new Error("e").stack;

                    assert.ok(!/createClass\.checkMethodName/.test(stack),
                        "Wrong name for the class name inside calls:\n" +
                        stack +
                        "\n\nIf running inside a V8 JS engine, please ignore this test.");
                }
            });

            var customName = new CustomName();
            customName.checkMethodName();
        });

        it('should have the class name on the `__name` property.', function() {
            var CustomClass = createClass("CustomClass", {
                getClassName: function() {
                	return this.__name;
                }
            });

            var customClass = new CustomClass();
            assert.equal(customClass.getClassName(), "CustomClass");
        });

        it('should have the class `__name`, including when using inheritance', function() {
            var BaseClass = createClass("BaseClass", {
                /**
                 * @return {string}
                 */
                getClassName: function() {
                	return this.__name;
                }
            });

            var DerivedClass = createClass("DerivedClass", BaseClass, {
                /**
                 * @return {string}
                 */
                getDerivedName: function() {
                	return this.__name;
                }
            });

            var baseClass = new BaseClass();
            assert.equal(baseClass.getClassName(), "BaseClass");

            var derivedClass = new DerivedClass();
            assert.equal(derivedClass.getClassName(), "DerivedClass");
            assert.equal(derivedClass.getDerivedName(), "DerivedClass");
        });
    });
});


describe('class-mixins-test.js', function() {
    describe('Multiple mixins should contribute properties', function() {
        it('should allow multiple mixes, and base classes', function() {
            var Mix1 = createClass({
                mix1: "mix1"
            });

            var Mix2 = createClass({
                mix2: "mix2",
                overrideMix2: "mix2"
            });

            var Base = createClass({
                base: "base"
            });

            var Extend = createClass(Base, [Mix1, Mix2], {
                extend: "extend",
                overrideMix2: "overrideMix2"
            });

            var e = new Extend();

            assert.equal("mix1", e.mix1);
            assert.equal("mix2", e.mix2);
            assert.equal("base", e.base);
            assert.equal("extend", e.extend);
            assert.equal("overrideMix2", e.overrideMix2);
        });

        it('should not allow overwritting protected members in mixins', function() {
            assert.throws(function() {
                var Mix1 = createClass({
                    $protectedMember : 3
                });

                var Base = createClass({
                    $protectedMember : 4
                });

                var Extend = createClass(Base, [Mix1]);
            }, 'Protected member $protectedMember can not be overwritten by mixins.');
        });
    });
});

describe('class-static-test.js', function() {
    describe('creating static blocks', function() {
        it('should have them available', function() {
            var callResult = false,
                MyClass = createClass({}, {
                    staticFunction : function(result) {
                        callResult = result;
                    }
                });

            MyClass.staticFunction("called");

            assert.equal("called", callResult);
        });

        it('should not inherit them', function() {
            var Base = createClass({}, {
                staticFunction : function() {
                }
            });

            var MyClass = createClass(Base, {}, {
                otherStatic : function() {
                }
            });

            assert.equal("undefined", typeof MyClass.staticFunction);
            assert.equal("function", typeof MyClass.otherStatic);
        });
    });
});

//# sourceMappingURL=node_mocha_test.js.map